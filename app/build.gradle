/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.12/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation libs.junit.jupiter

    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // This dependency is used by the application.
    implementation libs.guava

    // These dependencies would be downloaded automaticallu during the
    // gradle check
    implementation 'org.json:json:20250107'
    implementation 'io.github.ollama4j:ollama4j:1.0.93'

    // This dependency would attach local file to build
    // implementation files('path to file')
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        // Select version of language according to next links and do
        // gradle check to download toolchain
        // https://en.wikipedia.org/wiki/Java_version_history
        // https://docs.gradle.org/current/userguide/toolchains.html
        languageVersion = JavaLanguageVersion.of(17)
    }
}

application {
    // Define the main class for the application.
    mainClass = 'org.example.App'
}

jar {
    from {
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    manifest {
        attributes 'Main-Class': application.mainClass
    }
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}
